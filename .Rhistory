labs (x = "Depth", y = "% Carbon")
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(CoreID != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_boxplot(aes(x = SiteID, y = EstimatedC_percent)) +
geom_point(aes(x = SiteID, y = EstimatedC_percent, color = Depth_cm),
size = 6, alpha = .6) +
scale_color_viridis_c() +
labs (x = "Site", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
#$filter(Core != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_point(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
size = 6, alpha = .6) +
geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID)) +
#$geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID)) +
labs (x = "Depth", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
#$filter(Core != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_point(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
size = 6, alpha = .6) +
geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = c(SiteID, CoreID))) +
#$geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID)) +
labs (x = "Depth", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
#$filter(Core != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_point(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
size = 6, alpha = .6) +
geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID, group = CoreID)) +
#$geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID)) +
labs (x = "Depth", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
#$filter(Core != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_point(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
size = 6, alpha = .6) +
#$geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID, group = CoreID)) +
geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID, group = CoreID),
se = FALSE) +
labs (x = "Depth", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
#$filter(Core != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_point(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
size = 6, alpha = .6) +
#$geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID, group = CoreID)) +
geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent, color = CoreID),
se = FALSE) +
labs (x = "Depth", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
#$filter(Core != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_point(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
size = 6, alpha = .6) +
#$geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID, group = CoreID)) +
geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
se = FALSE) +
labs (x = "Depth", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
#$filter(Core != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_point(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
size = 6, alpha = .6) +
geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID, group = CoreID)) +
geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
se = FALSE) +
labs (x = "Depth", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
#$filter(Core != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_point(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
size = 6, alpha = .6) +
#$geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID, group = CoreID)) +
geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
se = FALSE) +
labs (x = "Depth", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
#$filter(Core != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_point(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
size = 6, alpha = .6) +
geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID, group = CoreID)) +
#$geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
se = FALSE) +
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
#$filter(Core != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_point(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
size = 6, alpha = .6) +
geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID, group = CoreID)) +
#$geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
#$se = FALSE) +
labs (x = "Depth", y = "% Carbon")
geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID, group_by(CoreID)) +
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
#$filter(Core != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_point(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
size = 6, alpha = .6) +
geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID, group_by(CoreID))) +
#$geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
#$se = FALSE) +
labs (x = "Depth", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
#$filter(Core != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_point(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
size = 6, alpha = .6) +
geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID), group_by(CoreID)) +
#$geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
#$se = FALSE) +
labs (x = "Depth", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
#$filter(Core != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_point(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
size = 6, alpha = .6) +
geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = interaction(SiteID, CoreID))) +
#$geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
#$se = FALSE) +
labs (x = "Depth", y = "% Carbon")
#$geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = interaction(SiteID, CoreID))) +
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
#$filter(Core != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_point(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
size = 6, alpha = .6) +
#$geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = interaction(SiteID, CoreID))) +
geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent, color = interaction(SiteID, CoreID)),
se = FALSE) +
labs (x = "Depth", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(Core != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_point(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
size = 6, alpha = .6) +
#$geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = interaction(SiteID, CoreID))) +
geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent, color = interaction(SiteID, CoreID)),
se = FALSE) +
labs (x = "Depth", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(CoreID != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_point(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
size = 6, alpha = .6) +
#$geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = interaction(SiteID, CoreID))) +
geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent, color = interaction(SiteID, CoreID)),
se = FALSE) +
labs (x = "Depth", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(CoreID != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_point(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
size = 6, alpha = .6) +
#$geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = interaction(SiteID, CoreID))) +
geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent, color = interaction(SiteID, CoreID)),
se = FALSE) +
geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent), se = FALSE) +
labs (x = "Depth", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(CoreID != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_point(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
size = 6, alpha = .6) +
#$geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = interaction(SiteID, CoreID))) +
geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent, color = interaction(SiteID, CoreID)),
se = FALSE) +
geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent), color = "black", se = FALSE) +
labs (x = "Depth", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(CoreID != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_point(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
size = 6, alpha = .6) +
#$geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = interaction(SiteID, CoreID))) +
geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent, color = interaction(SiteID, CoreID)),
se = FALSE) +
geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent), color = "black", lwd = 3 se = FALSE) +
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(CoreID != "D") %>% # exclude deep site for now for scale reasons
ggplot() +
geom_point(aes(x = Depth_cm, y = EstimatedC_percent, color = SiteID),
size = 6, alpha = .6) +
#$geom_line(aes(x = Depth_cm, y = EstimatedC_percent, color = interaction(SiteID, CoreID))) +
geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent, color = interaction(SiteID, CoreID)),
se = FALSE) +
geom_smooth(aes(x = Depth_cm, y = EstimatedC_percent), color = "black", lwd = 3, se = FALSE) +
labs (x = "Depth", y = "% Carbon")
View(bcElem)
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(Depth_cm <= 30) %>% # keep D cores but only to 30 cm for comparison
ggplot() +
geom_boxplot(aes(x = SiteID, y = EstimatedC_percent, color = CoreID)) +
labs (x = "Site", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(Depth_cm <= 30) %>% # keep D cores but only to 30 cm for comparison
ggplot() +
geom_boxplot(aes(x = SiteID, y = EstimatedC_percent, fill = CoreID)) +
labs (x = "Site", y = "% Carbon")
View(bcElem)
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(Depth_cm <= 30) %>% # keep D cores but only to 30 cm for comparison
ggplot() +
geom_boxplot(aes(x = SiteID, y = EstimatedC_percent, fill = CoreID)) +
geom_point(aes(x = SiteID, y = EstimatedC_percent, fill = CoreID)) +
labs (x = "Site", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(Depth_cm <= 30) %>% # keep D cores but only to 30 cm for comparison
ggplot() +
geom_boxplot(aes(x = SiteID, y = EstimatedC_percent, fill = CoreID)) +
geom_point(aes(x = SiteID, y = EstimatedC_percent, color = Depth_cm),
size = 6, alpha = .6) +
labs (x = "Site", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(Depth_cm <= 30) %>% # keep D cores but only to 30 cm for comparison
ggplot() +
geom_boxplot(aes(x = SiteID, y = EstimatedC_percent, fill = CoreID)) +
geom_point(aes(x = SiteID, y = EstimatedC_percent, color = Depth_cm),
size = 6, alpha = .6) +
scale_color_viridis_c() +
labs (x = "Site", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(Depth_cm <= 30) %>% # keep D cores but only to 30 cm for comparison
ggplot() +
geom_boxplot(aes(x = SiteID, y = EstimatedC_percent, fill = CoreID)) +
geom_point(aes(x = SiteID, y = EstimatedC_percent, color = Depth_cm, position_dodge2()),
size = 6, alpha = .6) +
scale_color_viridis_c() +
labs (x = "Site", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(Depth_cm <= 30) %>% # keep D cores but only to 30 cm for comparison
ggplot() +
geom_boxplot(aes(x = SiteID, y = EstimatedC_percent, fill = CoreID)) +
geom_point(aes(x = SiteID, y = EstimatedC_percent, color = Depth_cm), position_dodge2(),
size = 6, alpha = .6) +
scale_color_viridis_c() +
labs (x = "Site", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(Depth_cm <= 30) %>% # keep D cores but only to 30 cm for comparison
ggplot() +
geom_boxplot(aes(x = SiteID, y = EstimatedC_percent, fill = CoreID)) +
geom_point(aes(x = SiteID, y = EstimatedC_percent, color = Depth_cm),
position = position_dodge2(),
size = 6, alpha = .6) +
scale_color_viridis_c() +
labs (x = "Site", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(Depth_cm <= 30) %>% # keep D cores but only to 30 cm for comparison
ggplot() +
geom_boxplot(aes(x = SiteID, y = EstimatedC_percent, fill = CoreID)) +
geom_point(aes(x = SiteID, y = EstimatedC_percent, color = Depth_cm),
position = position_dodge2(width = 1),
size = 6, alpha = .6) +
scale_color_viridis_c() +
labs (x = "Site", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(Depth_cm <= 30) %>% # keep D cores but only to 30 cm for comparison
ggplot() +
geom_boxplot(aes(x = SiteID, y = EstimatedC_percent, fill = CoreID)) +
geom_point(aes(x = SiteID, y = EstimatedC_percent, color = Depth_cm),
position = position_jitterdodge(),
size = 6, alpha = .6) +
scale_color_viridis_c() +
labs (x = "Site", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(Depth_cm <= 30) %>% # keep D cores but only to 30 cm for comparison
ggplot() +
geom_boxplot(aes(x = SiteID, y = EstimatedC_percent, fill = CoreID)) +
geom_point(aes(x = SiteID, y = EstimatedC_percent, color = CoreID),
position = position_jitterdodge(),
size = 6, alpha = .6) +
scale_color_viridis_c() +
labs (x = "Site", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(Depth_cm <= 30) %>% # keep D cores but only to 30 cm for comparison
ggplot() +
geom_boxplot(aes(x = SiteID, y = EstimatedC_percent, fill = CoreID)) +
geom_point(aes(x = SiteID, y = EstimatedC_percent, color = CoreID),
position = position_jitterdodge(),
size = 6, alpha = .6) +
#scale_color_viridis_c() +
labs (x = "Site", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(Depth_cm <= 30) %>% # keep D cores but only to 30 cm for comparison
ggplot() +
geom_boxplot(aes(x = SiteID, y = EstimatedC_percent, fill = CoreID)) +
geom_point(aes(x = SiteID, y = EstimatedC_percent, color = CoreID),
position = position_dodge2(width = .5),
size = 6, alpha = .6) +
#scale_color_viridis_c() +
labs (x = "Site", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(Depth_cm <= 30) %>% # keep D cores but only to 30 cm for comparison
ggplot() +
geom_boxplot(aes(x = SiteID, y = EstimatedC_percent, fill = CoreID)) +
geom_point(aes(x = SiteID, y = EstimatedC_percent, color = CoreID),
position = position_dodge2(width = .7),
size = 6, alpha = .6) +
#scale_color_viridis_c() +
labs (x = "Site", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(Depth_cm <= 30) %>% # keep D cores but only to 30 cm for comparison
ggplot() +
geom_boxplot(aes(x = SiteID, y = EstimatedC_percent, fill = CoreID)) +
geom_point(aes(x = SiteID, y = EstimatedC_percent, color = Depth_cm),
position = position_dodge2(width = .7),
size = 6, alpha = .6) +
#scale_color_viridis_c() +
labs (x = "Site", y = "% Carbon")
##
bcElem %>%
filter(EstimatedC_percent < 5) %>% # b/c theres two HUGE outliers in CH at 10%
filter(Depth_cm <= 30) %>% # keep D cores but only to 30 cm for comparison
ggplot() +
geom_boxplot(aes(x = SiteID, y = EstimatedC_percent, fill = CoreID)) +
geom_point(aes(x = SiteID, y = EstimatedC_percent, color = Depth_cm),
position = position_dodge2(width = .7),
size = 6, alpha = .6) +
scale_color_viridis_c() +
labs (x = "Site", y = "% Carbon")
gc()
### packages
library(tidyverse)
library(rebird)
library(shiny)
library(shinyjs) # for hidden() to hide buttons
library(leaflet) # for the map and everything on it
library(geosphere) # for haversineDist() to calculate distances b/w guess and points
# other setup
apiKey = "5bs9bui5p642"
# get most recent sightings per species in US in last ten days
ebirdregion(loc = "US", key = apiKey, back = 10) %>%
arrange(speciesCode) -> birdSightings
# set params
commonCheck <- 0; uncommonCheck <- 0; rareCheck <- 0
# try random birds that've been sighted until you have an easy, medium, and hard
while ((commonCheck + uncommonCheck + rareCheck) < 3) {
# random bird species from sightings
randomRow <- sample(1:nrow(birdSightings), size = 1)
randomBird <- birdSightings[randomRow, ]$speciesCode
# query that species
rbirdSightings <- ebirdregion(loc = "US", key = apiKey, back = 10, species = randomBird)
# assign it to question based on number of sightings returned
numSightings <- nrow(rbirdSightings)
# hard mode is less than ten sightings
if (numSightings <= 10) {
if (rareCheck == 0) {
# if not already set, set it and flip the check
rareSightings <- rbirdSightings
rareCheck <- 1
print("rare")
}
} else if ( (numSightings > 25) & (numSightings <= 500) ) {
if (uncommonCheck == 0) {
# if not already set, set it and flip the check
uncommonSightings <- rbirdSightings
uncommonCheck <- 1
print("uncommon")
}
} else if ( (numSightings > 500) & (numSightings <= 5000) ) {
if (commonCheck == 0) {
# if not already set, set it and flip the check
commonSightings <- rbirdSightings
commonCheck <- 1
print("common")
}
} else { print("too easy") }
}
# key
apiKey = "5bs9bui5p642"
# get most recent sightings per species in US in last ten days
ebirdregion(loc = "US", key = apiKey, back = 10) %>%
arrange(speciesCode) -> birdSightings
### packages
library(tidyverse)
library(rebird)
library(shiny)
library(shinyjs) # for hidden() to hide buttons
library(leaflet) # for the map and everything on it
library(geosphere) # for haversineDist() to calculate distances b/w guess and points
# key
apiKey = "5bs9bui5p642"
# get most recent sightings per species in US in last ten days
ebirdregion(loc = "US", key = apiKey, back = 10) %>%
arrange(speciesCode) -> birdSightings
# set params
level1Check <- 0; level2Check <- 0; level3Check <- 0; level4Check <- 0; level5Check <- 0
# try random birds that've been sighted until you have an easy, medium, and hard
while (sum(level1Check, level2Check, level3Check, level4Check, level5Check) < 5) {
# random bird species from sightings
randomRow <- sample(1:nrow(birdSightings), size = 1)
randomBird <- birdSightings[randomRow, ]$speciesCode
# query that species
rbirdSightings <- ebirdregion(loc = "US", key = apiKey, back = 10, species = randomBird)
# assign it to question based on number of sightings returned
numSightings <- nrow(rbirdSightings)
# level 5
if (numSightings <= 10) {
if (level5Check == 0) {
# if not already set, set it and flip the check
level5Sightings <- rbirdSightings
level5Check <- 1
print("level5")
}
# level 4
} else if ( (numSightings > 25) & (numSightings <= 100) ) {
if (level4Check == 0) {
# if not already set, set it and flip the check
level4Sightings <- rbirdSightings
level4Check <- 1
print("level4")
}
# level 3
} else if ( (numSightings > 200) & (numSightings <= 400) ) {
if (level3Check == 0) {
# if not already set, set it and flip the check
level3Sightings <- rbirdSightings
level3Check <- 1
print("level3")
}
# level 2
} else if ( (numSightings > 500) & (numSightings <= 1000) ) {
if (level2Check == 0) {
# if not already set, set it and flip the check
level2Sightings <- rbirdSightings
level2Check <- 1
print("level2")
}
# level 2
} else if ( (numSightings > 1000) & (numSightings <= 5000) ) {
if (level1Check == 0) {
# if not already set, set it and flip the check
level1Sightings <- rbirdSightings
level1Check <- 1
print("level1")
}
} else { print("level0") }
}
runApp('D:/~Programming/Rthings/BirdNerd')

scale_color_viridis_c(guide = "none") +
labs(x = expression(delta^"13"*"C (\u2030)"),
y = expression(C["org"]*" (%)"),
title = "Soil Carbon Isotopic Signature") +
theme_bw() +
theme(axis.title = element_text(size = 16),
plot.title = element_text(vjust = -10, hjust = .05),
plot.margin = margin(t = 0)) +
ylim(-0, 1.7) + xlim(-35, 0)
isotopCarbScatterplot
## both together
grid.arrange(soilCarbBoxplot, isotopCarbScatterplot, ncol = 1)
## soil carbon by site
soilCarbBoxplot <- masterData %>%
# filter to only EA cores and shallows
filter(!is.na(EstimatedC_percent)) %>%
filter(SampleDepth_Raw < 33) %>%
# plot
ggplot() +
geom_boxplot(aes(x = SiteID, y = EstimatedC_percent)) +
geom_point(aes(x = SiteID,
y = EstimatedC_percent,
color = SampleDepth_Uncompacted_cm),
size = 4, alpha = .6) +
# plot appearance
scale_color_viridis_c(name = "Sediment Depth (cm)",
guide = guide_colorbar(barwidth = 25,
title.position = "top",
title.hjust = .5)) +
labs(x = "Site",
y = expression(C["org"]*" (%)"),
title = "Soil Organic Carbon Content Across 12 Sites") +
theme_bw() +
theme(axis.title = element_text(size = 16),
legend.position = "bottom",
plot.title = element_text(vjust = -10, hjust = .05),
plot.margin = margin()) +
ylim(0, 1.7)
soilCarbBoxplot
## soil carbon by site
soilCarbBoxplot <- masterData %>%
# filter to only EA cores and shallows
filter(!is.na(EstimatedC_percent)) %>%
filter(SampleDepth_Raw < 33) %>%
# plot
ggplot() +
geom_boxplot(aes(x = SiteID, y = EstimatedC_percent)) +
geom_point(aes(x = SiteID,
y = EstimatedC_percent,
color = SampleDepth_Uncompacted_cm),
size = 4, alpha = .6) +
# plot appearance
scale_color_viridis_c(name = "Sediment Depth (cm)",
guide = guide_colorbar(barwidth = 25,
title.position = "top",
title.hjust = .5)) +
labs(x = "Site",
y = expression(C["org"]*" (%)"),
title = "Soil Organic Carbon Content Across 12 Sites") +
theme_bw() +
theme(axis.title = element_text(size = 16),
legend.position = "bottom",
plot.title = element_text(vjust = -10, hjust = .05),
plot.margin = margin(t = 10, r = 10, b = 2, l = 10)) +
ylim(0, 1.7)
soilCarbBoxplot
## del13C vs %C
isotopCarbScatterplot <- masterData %>%
# filter to only EA cores and shallows
filter(!is.na(EstimatedC_percent)) %>%
# plot
ggplot() +
geom_point(aes(y = EstimatedC_percent,
x = d13C_pptVPDB,
color = SampleDepth_Uncompacted_cm),
size = 4, alpha = .6) +
# plot aesthetic
scale_color_viridis_c(guide = "none") +
labs(x = expression(delta^"13"*"C (\u2030)"),
y = expression(C["org"]*" (%)"),
title = "Soil Carbon Isotopic Signature") +
theme_bw() +
theme(axis.title = element_text(size = 16),
plot.title = element_text(vjust = -10, hjust = .05),
plot.margin = margin(t = 2, l = 10, r = 10, b = 10)) +
ylim(-0, 1.7) + xlim(-35, 0)
isotopCarbScatterplot
## both together
grid.arrange(soilCarbBoxplot, isotopCarbScatterplot, ncol = 1)
## del13C vs %C
isotopCarbScatterplot <- masterData %>%
# filter to only EA cores and shallows
filter(!is.na(EstimatedC_percent)) %>%
# plot
ggplot() +
geom_point(aes(y = EstimatedC_percent,
x = d13C_pptVPDB,
color = SampleDepth_Uncompacted_cm),
size = 4, alpha = .6) +
# plot aesthetic
scale_color_viridis_c(guide = "none") +
labs(x = expression(delta^"13"*"C (\u2030)"),
y = expression(C["org"]*" (%)"),
title = "Soil Carbon Isotopic Signature") +
theme_bw() +
theme(axis.title = element_text(size = 16), # axis titles size
axis.text=element_text(size = 12), # axis labels size
plot.title = element_text(vjust = -10, hjust = .05), # main title placement
plot.margin = margin(t = 2, l = 10, r = 10, b = 10)) + # reduce top margin
ylim(-0, 1.7) + xlim(-35, 0)
isotopCarbScatterplot
## soil carbon by site
soilCarbBoxplot <- masterData %>%
# filter to only EA cores and shallows
filter(!is.na(EstimatedC_percent)) %>%
filter(SampleDepth_Raw < 33) %>%
# plot
ggplot() +
geom_boxplot(aes(x = SiteID, y = EstimatedC_percent)) +
geom_point(aes(x = SiteID,
y = EstimatedC_percent,
color = SampleDepth_Uncompacted_cm),
size = 4, alpha = .6) +
# plot appearance
scale_color_viridis_c(name = "Sediment Depth (cm)",
guide = guide_colorbar(barwidth = 25,
title.position = "top",
title.hjust = .5)) +
labs(x = "Site",
y = expression(C["org"]*" (%)"),
title = "Soil Organic Carbon Content Across 12 Sites") +
theme_bw() +
theme(axis.title = element_text(size = 16), # axis titles size
axis.text=element_text(size = 12), # axis labels size
legend.position = "bottom", # legend placement below
plot.title = element_text(vjust = -10, hjust = .05), # main title placement
plot.margin = margin(t = 10, r = 10, b = 2, l = 10)) + # reduce bottom margin
ylim(0, 1.7)
soilCarbBoxplot
## del13C vs %C
isotopCarbScatterplot <- masterData %>%
# filter to only EA cores and shallows
filter(!is.na(EstimatedC_percent)) %>%
# plot
ggplot() +
geom_point(aes(y = EstimatedC_percent,
x = d13C_pptVPDB,
color = SampleDepth_Uncompacted_cm),
size = 4, alpha = .6) +
# plot aesthetic
scale_color_viridis_c(guide = "none") +
labs(x = expression(delta^"13"*"C (\u2030)"),
y = expression(C["org"]*" (%)"),
title = "Soil Carbon Isotopic Signature") +
theme_bw() +
theme(axis.title = element_text(size = 16), # axis titles size
axis.text=element_text(size = 12), # axis labels size
plot.title = element_text(vjust = -10, hjust = .05), # main title placement
plot.margin = margin(t = 2, l = 10, r = 10, b = 10)) + # reduce top margin
ylim(-0, 1.7) + xlim(-35, 0)
isotopCarbScatterplot
## both together
grid.arrange(soilCarbBoxplot, isotopCarbScatterplot, ncol = 1)
## both together
grid.arrange(soilCarbBoxplot, isotopCarbScatterplot, ncol = 1, heights = c(1,1))
## both together
grid.arrange(soilCarbBoxplot, isotopCarbScatterplot, ncol = 1, heights = c(1.2,1))
## both together
grid.arrange(soilCarbBoxplot, isotopCarbScatterplot, ncol = 1, heights = c(1.2=3,1))
## both together
grid.arrange(soilCarbBoxplot, isotopCarbScatterplot, ncol = 1, heights = c(1.3,1))
## both together
grid.arrange(soilCarbBoxplot, isotopCarbScatterplot, ncol = 1, heights = c(1.25,1))
40/36
36/(4/3)
tempdir()
dir.create(tempdir())
?bs
#cubic spline with 3 knots (cutpoints)
#3 cutpoints at ages 25, 40, 60
fit<-lm(wage~bs(age,knots=c(25,40,60)),data=Wage)
require(splines)
(123)
#Spectral Decomposition of MVN:
# Set seed for reproducibility
set.seed(123)
# Parameters
n <- 1000  # Sample size
mu <- c(0, 0, 0)  # Mean vector
Sigma <- matrix(c(2, 1, 1,
1, 2, 1,
1, 1, 2), nrow = 3)  # Covariance matrix
#Compute the spectral decomposition of Sigma
eigen_decomp <- eigen(Sigma)
P <- eigen_decomp$vectors  # Eigenvectors (columns of P)
Lambda <- diag(eigen_decomp$values)  # Diagonal matrix of eigenvalues
#Generate standard normal random variables
Z <- matrix(rnorm(n * 3), nrow = n, ncol = 3)
#Apply the transformation X = Z sqrt(Lambda) P^T
sqrt_Lambda <- sqrt(Lambda)  # Square root of eigenvalues
X <- Z %*% sqrt_Lambda %*% t(P)
#Verify the results
cat("Sample mean:\n", colMeans(X), "\n")  # Should be close to mu
cat("Sample covariance:\n", cov(X), "\n")  # Should be close to Sigma
#Plot the samples (for visualization)
pairs(X, pch = 16, col = rgb(0, 0, 1, 0.5),
main = "Pairwise Scatterplots of Multivariate Normal Samples")
###Logistic Regression
#Construct a dataset
no.yes<-c("No","Yes")
smoking<-gl(2,1,8,no.yes)
obesity<- gl(2,2,8,no.yes)
snoring<- gl(2,4,8,no.yes)
n.tot<-c(60,17,8,2,187,85,51,23)
n.hyp<- c(5,2,1,0,35,13,15,8)
data.frame(smoking, obesity,snoring,n.tot,n.hyp)
hyp.tbl<-cbind(n.hyp,n.tot-n.hyp)
glm.hyp <- glm(hyp.tbl~smoking+obesity+snoring, family = binomial("logit"))
summary(glm.hyp)
anova(glm.hyp,test="Chisq")
anova(glm.hyp)
gl(2,2,8,no.yes)
obesity<- gl(2,2,8,no.yes)
gl(2,2,8,no.yes)
dunif
dunif(.4, 0, 1)
dunif(.2, 0, 1)
dunif(2, 0, 1)
## packages
library(tidyverse)
## params
myP <- 1000
myN <- 50
library(bootstrap)
data(law)
install.packages("bootstrap")
library(bootstrap)
head(law)
## load data
data(law)
force(law)
## params
bootstrapReps <- 50
# empty vec for bootstrapped means
thetaHatStar <- numeric(bootstrapReps)
## load data
data(law)
head(law)
## params
bootstrapReps <- 50
n <- nrow(law)
# empty vec for bootstrapped means
thetaHatStar <- numeric(bootstrapReps)
## estimate correlation b/w lsat and gpa
cor(law$LSAT, law$GPA)
set.seed(597)
## params
bootstrapReps <- 1000
n <- nrow(law)
# empty vec for bootstrapped means
thetaHatStar <- numeric(bootstrapReps)
thetaHat
### estimate correlation b/w lsat and gpa
# sample cor first
thetaHat <- cor(law$LSAT, law$GPA)
thetaHat
bootSample <- law[bootIndices, ]
## bootstrap
for (b in 1:bootstrapReps) {
bootIndices <- sample(1:n, size = n, replace = TRUE)
bootSample <- law[bootIndices, ]
# add correlation of bootstrap sample to vec
thetaHatStar[b] <- cor(bootSample$LSAT, bootSample$GPA)
}
## load data
data(law)
head(law)
## params
bootstrapReps <- 1000
n <- nrow(law)
# empty vec for bootstrapped means
thetaHatStar <- numeric(bootstrapReps)
### estimate correlation b/w lsat and gpa
# sample cor first
thetaHat <- cor(law$LSAT, law$GPA)
thetaHat
set.seed(597)
## bootstrap
for (b in 1:bootstrapReps) {
bootIndices <- sample(1:n, size = n, replace = TRUE)
bootSample <- law[bootIndices, ]
# add correlation of bootstrap sample to vec
thetaHatStar[b] <- cor(bootSample$LSAT, bootSample$GPA)
}
## mean of bootsraps
thetaHatStarMean <- mean(thetaHatStar)
# se
bootstrap_se <- sqrt( ( 1 / (bootstrapReps - 1) ) * sum((thetaHatStar - thetaHatStarMean)^2)
# se
bootstrap_se <- sqrt( ( 1 / (bootstrapReps - 1) ) * sum((thetaHatStar - thetaHatStarMean)^2) )
se(thetaHatStar)
sd(thetaHatStar)
# bootstrap bias
bootBias <- thetaHatStarMean - thetaHat
bootBias
## t-statistic of each boostrap sample
tStar <- (thetaHatStar - thetaHat) / sd(thetaHatStar)
tStar
## Bootstrap Bias of Estimator
bootBias <- thetaHatStarMean - thetaHat
bootBias
## t-statistic of each boostrap sample
tStar <- (thetaHatStar - thetaHat) / sd(thetaHatStar)
## bootstrap
for (b in 1:bootstrapReps) {
bootIndices <- sample(1:n, size = n, replace = TRUE)
bootSample <- law[bootIndices, ]
# add correlation of bootstrap sample to vec
thetaHatStar[b] <- cor(bootSample$LSAT, bootSample$GPA)
}
## results of bootsraps
# mean
thetaHatStarMean <- mean(thetaHatStar)
# standard error (manually and using sd() func)
bootstrap_se <- sqrt( ( 1 / (bootstrapReps - 1) ) * sum((thetaHatStar - thetaHatStarMean)^2) )
sd(thetaHatStar)
## Bootstrap Bias of Estimator
bootBias <- thetaHatStarMean - thetaHat
bootBias
## load data
data(law)
head(law)
## params
bootstrapReps <- 1000
n <- nrow(law)
# empty vec for bootstrapped means
thetaHatStar <- numeric(bootstrapReps)
### estimate correlation b/w lsat and gpa
# sample cor first
thetaHat <- cor(law$LSAT, law$GPA)
thetaHat
set.seed(597)
## bootstrap
for (b in 1:bootstrapReps) {
bootIndices <- sample(1:n, size = n, replace = TRUE)
bootSample <- law[bootIndices, ]
# add correlation of bootstrap sample to vec
thetaHatStar[b] <- cor(bootSample$LSAT, bootSample$GPA)
}
## results of bootsraps
# mean
thetaHatStarMean <- mean(thetaHatStar)
# standard error (manually and using sd() func)
bootstrap_se <- sqrt( ( 1 / (bootstrapReps - 1) ) * sum((thetaHatStar - thetaHatStarMean)^2) )
sd(thetaHatStar)
## Bootstrap Bias of Estimator
bootBias <- thetaHatStarMean - thetaHat
bootBias
## t-statistic of each boostrap sample
tStar <- (thetaHatStar - thetaHat) / sd(thetaHatStar)
tStar
## find critical values (2.5% and 97.5% quantiles)
alpha <- .05
tQuantiles <- quantile(tStar, probs = c(alpha / 2, 1 - (alpha / 2)))
tQuantiles
## load data
data(law)
head(law)
## params
bootstrapReps <- 1000
n <- nrow(law)
# empty vec for bootstrapped means
thetaHatStar <- numeric(bootstrapReps)
### estimate correlation b/w lsat and gpa
# sample cor first
thetaHat <- cor(law$LSAT, law$GPA)
thetaHat
set.seed(597)
## bootstrap
for (b in 1:bootstrapReps) {
bootIndices <- sample(1:n, size = n, replace = TRUE)
bootSample <- law[bootIndices, ]
# add correlation of bootstrap sample to vec
thetaHatStar[b] <- cor(bootSample$LSAT, bootSample$GPA)
}
## results of bootsraps
# mean
thetaHatStarMean <- mean(thetaHatStar)
# standard error (manually and using sd() func)
bootstrap_se <- sqrt( ( 1 / (bootstrapReps - 1) ) * sum((thetaHatStar - thetaHatStarMean)^2) )
sd(thetaHatStar)
## Bootstrap Bias of Estimator
bootBias <- thetaHatStarMean - thetaHat
bootBias
## t-statistic of each bootstrap sample
tStar <- (thetaHatStar - thetaHat) / sd(thetaHatStar)
tStar
## find critical values (2.5% and 97.5% quantiles)
alpha <- .05
tQuantiles <- quantile(tStar, probs = c(alpha / 2, 1 - (alpha / 2)))
tQuantiles
## params
bootstrapReps <- 1000
n <- nrow(law)
# empty vec for bootstrapped means
thetaHatStar <- numeric(bootstrapReps)
### estimate correlation b/w lsat and gpa
# sample cor first
thetaHat <- cor(law$LSAT, law$GPA)
thetaHat
set.seed(597)
## bootstrap
for (b in 1:bootstrapReps) {
bootIndices <- sample(1:n, size = n, replace = TRUE)
bootSample <- law[bootIndices, ]
# add correlation of bootstrap sample to vec
thetaHatStar[b] <- cor(bootSample$LSAT, bootSample$GPA)
}
## results of bootsraps
# mean
thetaHatStarMean <- mean(thetaHatStar)
thetaHatStarMean
# standard error (manually and using sd() func)
bootstrap_se <- sqrt( ( 1 / (bootstrapReps - 1) ) * sum((thetaHatStar - thetaHatStarMean)^2) )
sd(thetaHatStar)
sd(thetaHatStar)
## Bootstrap Bias of Estimator
bootBias <- thetaHatStarMean - thetaHat
bootBias
## t-statistic of each bootstrap sample
tStar <- (thetaHatStar - thetaHat) / sd(thetaHatStar)
tStar
## find critical values (2.5% and 97.5% quantiles)
alpha <- .05
tQuantiles <- quantile(tStar, probs = c(alpha / 2, 1 - (alpha / 2)))
tQuantiles
shinylive::export(appdir = ".", destdir = "docs")
### write these to csvs in folder
setwd(r"{D:\~Programming\Rthings\BirdNerd}")
shinylive::export(appdir = ".", destdir = "docs")
warnings()
httpuv::runStaticServer("docs/", port = 8008)
### packages
library(dplyr)
library(magrittr)
library(curl)
shinylive::export(appdir = ".", destdir = "docs")
httpuv::runStaticServer("docs/", port = 8008)
shiny::runApp()
shinylive::export(appdir = ".", destdir = "docs")
httpuv::runStaticServer("docs/", port = 8008)
### packages
library(dplyr)
library(magrittr)
library(shiny)
library(shinyjs) # for hidden() to hide buttons
library(leaflet) # for the map and everything on it
library(geosphere) # for haversineDist() to calculate distances b/w guess and points
### script --------------------------------------------------------------------
## read ebird query of birds sighted in last ten days from csv files
# function to read sightings csvs from github
readSightingsCSVs <- function(whichSighting = 1) {
requestURL <- paste0("https://api.github.com/repos/jsm425/BirdNerd/contents/BirdSightingLists/level",
as.character(whichSighting),
"Sightings.csv")
responseCSV <- read.csv(requestURL)
# return it as csv
return(responseCSV)
}
# read levels 1-5
level1Sightings <- readSightingsCSVs(1)
requestURL <- paste0("https://raw.githubusercontent.com/jsm425/BirdNerd/refs/heads/main/BirdSightingLists/level",
as.character(whichSighting),
"Sightings.csv")
### script --------------------------------------------------------------------
## read ebird query of birds sighted in last ten days from csv files
# function to read sightings csvs from github
readSightingsCSVs <- function(whichSighting = 1) {
requestURL <- paste0("https://raw.githubusercontent.com/jsm425/BirdNerd/refs/heads/main/BirdSightingLists/level",
as.character(whichSighting),
"Sightings.csv")
responseCSV <- read.csv(requestURL)
# return it as csv
return(responseCSV)
}
# read levels 1-5
level1Sightings <- readSightingsCSVs(1)
level2Sightings <- readSightingsCSVs(2)
runApp()
shinylive::export(appdir = ".", destdir = "docs")
httpuv::runStaticServer("docs")
# get most recent sightings per species in US in last ten days
ebirdregion(loc = "US", key = apiKey, back = 10) %>%
arrange(speciesCode) -> birdSightings
### packages
library(tidyverse)
library(rebird)
###
# key
apiKey = "5bs9bui5p642"
# get most recent sightings per species in US in last ten days
ebirdregion(loc = "US", key = apiKey, back = 10) %>%
arrange(speciesCode) -> birdSightings
# read levels 1-5
level1Sightings <- readSightingsCSVs(1)
level2Sightings <- readSightingsCSVs(2)
level3Sightings <- readSightingsCSVs(3)
level4Sightings <- readSightingsCSVs(4)
level5Sightings <- readSightingsCSVs(5)
View(birdSightings)
View(birdSightings)
View(level1Sightings)
